@page "/notes"
@using AppNote.Data
@using AppNote.Services
@inherits OwningComponentBase<NoteService>

@inject NavigationManager uriHelper;

<header class="header">
    <button class="header-button" type="button" @onclick="ShowPopUpAddNote">New note</button>
        <input class="header-input" type="text" placeholder="Enter search term" size="80" @bind="SearchStr" />
    <label class="header-label">Total notes: @_notes.Count</label>
</header>

@if (_popUpAddNote)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new Note</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ClosePopUpAddNote"></button>
                </div>
                <EditForm Model="_note" OnValidSubmit="SaveNote">
                    <div class="modal-body">
                        <table>
                            <tr>
                                <td>Note Title</td>
                                <td><input type="text" placeholder="Note title..." @bind="_note.Title" /></td>
                            </tr>
                            <tr>
                                <td>Note Text</td>
                                <td><input type="text" placeholder="Note text..." @bind="_note.Text" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save note</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (_popEditNote)
{
    <div class="modal" tabindex="-1" role="dialog" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add new Note</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ClosePopUpEditNote"></button>
                </div>
                <EditForm Model="CurrNote" OnValidSubmit="SaveEditedNote">
                    <div class="modal-body">
                        <table>
                            <tr>
                                <td>Note Title</td>
                                <td><input type="text" placeholder="Note title..." @bind="CurrNote.Title" /></td>
                            </tr>
                            <tr>
                                <td>Note Text</td>
                                <td><input type="text" placeholder="Note text..." @bind="CurrNote.Text" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save note</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<div class="notes">
    @foreach (var note in _notes)
    {
        <div class="note-collapsed">
            <label class="note-title">@note.Title</label>
            <button class="note-button" type="button" @onclick="() => ShowPopUpEditNote(note)">Edit note</button>
            <button class="note-button" type="button" @onclick="() => ViewNote(note)">View note</button>
            <label class="note-date">@GetNoteTimeSinceCreate(note)</label>
        </div>
        @if (note == CurrNote && _expanded)
        {
            <div class="note-expanded">
                <p class="note-text">@note.Text</p>
            </div>
        }
    }
</div>
<footer class="footer">
    <label>4Notes: anonymous notes sharing</label>
</footer>

@code {
    private bool _expanded = false;

    private bool _popUpAddNote = false;

    private bool _popEditNote = false;


    private string _searchStr;

    public string SearchStr
    {
        get {
            return _searchStr;
        }
        set {
            _searchStr = value;
            Service.FindNotes(SearchStr);
            _notes = Service.DisplayNotes();
        }
    }


    private IList<NoteClass> _notes;


    private NoteClass _note = new();

    public NoteClass CurrNote { get; set; }

    protected override void OnInitialized()
    {
        _notes = Service.DisplayNotes();
    }

    private void ShowPopUpAddNote()
    {
        _popUpAddNote = true;
    }

    private void ClosePopUpAddNote()
    {
        _popUpAddNote = false;
    }

    private void SaveNote()
    {
        _note.Date = DateTime.Now;
        Service.AddNewNote(_note);
        _note = new();
        _popUpAddNote = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


    private void ShowPopUpEditNote(NoteClass note)
    {
        CurrNote = note;
        _popEditNote = true;
    }

    private void ClosePopUpEditNote()
    {
        _popEditNote = false;
    }

    private void SaveEditedNote()
    {
        CurrNote.Date = DateTime.Now;
        Service.UpdateNote();
        _popEditNote = false;
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


    private void ViewNote(NoteClass note)
    {
        CurrNote = note;
        _expanded = !_expanded;
    }


    private string GetNoteTimeSinceCreate(NoteClass note)
    {
        DateTime now = DateTime.Now;
        DateTime noteDate = note.Date;
        if (now.Year - noteDate.Year > 0)
        {
            return $"Created {now.Year - noteDate.Year} year ago";
        }
        else if (now.Month - noteDate.Month > 0)
        {
            return $"Created {now.Month - noteDate.Month} month ago";
        }
        else if (now.Day - noteDate.Day > 0)
        {
            return $"Created {now.Day - noteDate.Day} day ago";
        }
        return "Created today";
    }
}
